// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vector_2eproto;
namespace calculus {
class Scalar;
class ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
class VectorMagnitudeRequest;
class VectorMagnitudeRequestDefaultTypeInternal;
extern VectorMagnitudeRequestDefaultTypeInternal _VectorMagnitudeRequest_default_instance_;
class VectorRequest;
class VectorRequestDefaultTypeInternal;
extern VectorRequestDefaultTypeInternal _VectorRequest_default_instance_;
}  // namespace calculus
PROTOBUF_NAMESPACE_OPEN
template<> ::calculus::Scalar* Arena::CreateMaybeMessage<::calculus::Scalar>(Arena*);
template<> ::calculus::Vector* Arena::CreateMaybeMessage<::calculus::Vector>(Arena*);
template<> ::calculus::VectorMagnitudeRequest* Arena::CreateMaybeMessage<::calculus::VectorMagnitudeRequest>(Arena*);
template<> ::calculus::VectorRequest* Arena::CreateMaybeMessage<::calculus::VectorRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace calculus {

// ===================================================================

class Scalar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculus.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {};
  virtual ~Scalar();

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scalar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar* New() const final {
    return CreateMaybeMessage<Scalar>(nullptr);
  }

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scalar& from);
  void MergeFrom(const Scalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculus.Scalar";
  }
  protected:
  explicit Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:calculus.Scalar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculus.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {};
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculus.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:calculus.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class VectorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculus.VectorRequest) */ {
 public:
  inline VectorRequest() : VectorRequest(nullptr) {};
  virtual ~VectorRequest();

  VectorRequest(const VectorRequest& from);
  VectorRequest(VectorRequest&& from) noexcept
    : VectorRequest() {
    *this = ::std::move(from);
  }

  inline VectorRequest& operator=(const VectorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorRequest& operator=(VectorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorRequest* internal_default_instance() {
    return reinterpret_cast<const VectorRequest*>(
               &_VectorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VectorRequest& a, VectorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorRequest* New() const final {
    return CreateMaybeMessage<VectorRequest>(nullptr);
  }

  VectorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorRequest& from);
  void MergeFrom(const VectorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculus.VectorRequest";
  }
  protected:
  explicit VectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kSecondFieldNumber = 2,
    kThirdFieldNumber = 3,
  };
  // .calculus.Vector first = 1;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  const ::calculus::Vector& first() const;
  ::calculus::Vector* release_first();
  ::calculus::Vector* mutable_first();
  void set_allocated_first(::calculus::Vector* first);
  private:
  const ::calculus::Vector& _internal_first() const;
  ::calculus::Vector* _internal_mutable_first();
  public:
  void unsafe_arena_set_allocated_first(
      ::calculus::Vector* first);
  ::calculus::Vector* unsafe_arena_release_first();

  // .calculus.Vector second = 2;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  const ::calculus::Vector& second() const;
  ::calculus::Vector* release_second();
  ::calculus::Vector* mutable_second();
  void set_allocated_second(::calculus::Vector* second);
  private:
  const ::calculus::Vector& _internal_second() const;
  ::calculus::Vector* _internal_mutable_second();
  public:
  void unsafe_arena_set_allocated_second(
      ::calculus::Vector* second);
  ::calculus::Vector* unsafe_arena_release_second();

  // .calculus.Vector third = 3;
  bool has_third() const;
  private:
  bool _internal_has_third() const;
  public:
  void clear_third();
  const ::calculus::Vector& third() const;
  ::calculus::Vector* release_third();
  ::calculus::Vector* mutable_third();
  void set_allocated_third(::calculus::Vector* third);
  private:
  const ::calculus::Vector& _internal_third() const;
  ::calculus::Vector* _internal_mutable_third();
  public:
  void unsafe_arena_set_allocated_third(
      ::calculus::Vector* third);
  ::calculus::Vector* unsafe_arena_release_third();

  // @@protoc_insertion_point(class_scope:calculus.VectorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::calculus::Vector* first_;
  ::calculus::Vector* second_;
  ::calculus::Vector* third_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class VectorMagnitudeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculus.VectorMagnitudeRequest) */ {
 public:
  inline VectorMagnitudeRequest() : VectorMagnitudeRequest(nullptr) {};
  virtual ~VectorMagnitudeRequest();

  VectorMagnitudeRequest(const VectorMagnitudeRequest& from);
  VectorMagnitudeRequest(VectorMagnitudeRequest&& from) noexcept
    : VectorMagnitudeRequest() {
    *this = ::std::move(from);
  }

  inline VectorMagnitudeRequest& operator=(const VectorMagnitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorMagnitudeRequest& operator=(VectorMagnitudeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VectorMagnitudeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorMagnitudeRequest* internal_default_instance() {
    return reinterpret_cast<const VectorMagnitudeRequest*>(
               &_VectorMagnitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VectorMagnitudeRequest& a, VectorMagnitudeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorMagnitudeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorMagnitudeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorMagnitudeRequest* New() const final {
    return CreateMaybeMessage<VectorMagnitudeRequest>(nullptr);
  }

  VectorMagnitudeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorMagnitudeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorMagnitudeRequest& from);
  void MergeFrom(const VectorMagnitudeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorMagnitudeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculus.VectorMagnitudeRequest";
  }
  protected:
  explicit VectorMagnitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMag1FieldNumber = 1,
    kMag2FieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // double mag1 = 1;
  void clear_mag1();
  double mag1() const;
  void set_mag1(double value);
  private:
  double _internal_mag1() const;
  void _internal_set_mag1(double value);
  public:

  // double mag2 = 2;
  void clear_mag2();
  double mag2() const;
  void set_mag2(double value);
  private:
  double _internal_mag2() const;
  void _internal_set_mag2(double value);
  public:

  // double angle = 3;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:calculus.VectorMagnitudeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double mag1_;
  double mag2_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scalar

// double value = 1;
inline void Scalar::clear_value() {
  value_ = 0;
}
inline double Scalar::_internal_value() const {
  return value_;
}
inline double Scalar::value() const {
  // @@protoc_insertion_point(field_get:calculus.Scalar.value)
  return _internal_value();
}
inline void Scalar::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Scalar::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:calculus.Scalar.value)
}

// -------------------------------------------------------------------

// Vector

// double x = 1;
inline void Vector::clear_x() {
  x_ = 0;
}
inline double Vector::_internal_x() const {
  return x_;
}
inline double Vector::x() const {
  // @@protoc_insertion_point(field_get:calculus.Vector.x)
  return _internal_x();
}
inline void Vector::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:calculus.Vector.x)
}

// double y = 2;
inline void Vector::clear_y() {
  y_ = 0;
}
inline double Vector::_internal_y() const {
  return y_;
}
inline double Vector::y() const {
  // @@protoc_insertion_point(field_get:calculus.Vector.y)
  return _internal_y();
}
inline void Vector::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:calculus.Vector.y)
}

// double z = 3;
inline void Vector::clear_z() {
  z_ = 0;
}
inline double Vector::_internal_z() const {
  return z_;
}
inline double Vector::z() const {
  // @@protoc_insertion_point(field_get:calculus.Vector.z)
  return _internal_z();
}
inline void Vector::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:calculus.Vector.z)
}

// -------------------------------------------------------------------

// VectorRequest

// .calculus.Vector first = 1;
inline bool VectorRequest::_internal_has_first() const {
  return this != internal_default_instance() && first_ != nullptr;
}
inline bool VectorRequest::has_first() const {
  return _internal_has_first();
}
inline void VectorRequest::clear_first() {
  if (GetArena() == nullptr && first_ != nullptr) {
    delete first_;
  }
  first_ = nullptr;
}
inline const ::calculus::Vector& VectorRequest::_internal_first() const {
  const ::calculus::Vector* p = first_;
  return p != nullptr ? *p : *reinterpret_cast<const ::calculus::Vector*>(
      &::calculus::_Vector_default_instance_);
}
inline const ::calculus::Vector& VectorRequest::first() const {
  // @@protoc_insertion_point(field_get:calculus.VectorRequest.first)
  return _internal_first();
}
inline void VectorRequest::unsafe_arena_set_allocated_first(
    ::calculus::Vector* first) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_);
  }
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:calculus.VectorRequest.first)
}
inline ::calculus::Vector* VectorRequest::release_first() {
  auto temp = unsafe_arena_release_first();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::calculus::Vector* VectorRequest::unsafe_arena_release_first() {
  // @@protoc_insertion_point(field_release:calculus.VectorRequest.first)
  
  ::calculus::Vector* temp = first_;
  first_ = nullptr;
  return temp;
}
inline ::calculus::Vector* VectorRequest::_internal_mutable_first() {
  
  if (first_ == nullptr) {
    auto* p = CreateMaybeMessage<::calculus::Vector>(GetArena());
    first_ = p;
  }
  return first_;
}
inline ::calculus::Vector* VectorRequest::mutable_first() {
  // @@protoc_insertion_point(field_mutable:calculus.VectorRequest.first)
  return _internal_mutable_first();
}
inline void VectorRequest::set_allocated_first(::calculus::Vector* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete first_;
  }
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(first);
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    
  } else {
    
  }
  first_ = first;
  // @@protoc_insertion_point(field_set_allocated:calculus.VectorRequest.first)
}

// .calculus.Vector second = 2;
inline bool VectorRequest::_internal_has_second() const {
  return this != internal_default_instance() && second_ != nullptr;
}
inline bool VectorRequest::has_second() const {
  return _internal_has_second();
}
inline void VectorRequest::clear_second() {
  if (GetArena() == nullptr && second_ != nullptr) {
    delete second_;
  }
  second_ = nullptr;
}
inline const ::calculus::Vector& VectorRequest::_internal_second() const {
  const ::calculus::Vector* p = second_;
  return p != nullptr ? *p : *reinterpret_cast<const ::calculus::Vector*>(
      &::calculus::_Vector_default_instance_);
}
inline const ::calculus::Vector& VectorRequest::second() const {
  // @@protoc_insertion_point(field_get:calculus.VectorRequest.second)
  return _internal_second();
}
inline void VectorRequest::unsafe_arena_set_allocated_second(
    ::calculus::Vector* second) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(second_);
  }
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:calculus.VectorRequest.second)
}
inline ::calculus::Vector* VectorRequest::release_second() {
  auto temp = unsafe_arena_release_second();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::calculus::Vector* VectorRequest::unsafe_arena_release_second() {
  // @@protoc_insertion_point(field_release:calculus.VectorRequest.second)
  
  ::calculus::Vector* temp = second_;
  second_ = nullptr;
  return temp;
}
inline ::calculus::Vector* VectorRequest::_internal_mutable_second() {
  
  if (second_ == nullptr) {
    auto* p = CreateMaybeMessage<::calculus::Vector>(GetArena());
    second_ = p;
  }
  return second_;
}
inline ::calculus::Vector* VectorRequest::mutable_second() {
  // @@protoc_insertion_point(field_mutable:calculus.VectorRequest.second)
  return _internal_mutable_second();
}
inline void VectorRequest::set_allocated_second(::calculus::Vector* second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete second_;
  }
  if (second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(second);
    if (message_arena != submessage_arena) {
      second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, second, submessage_arena);
    }
    
  } else {
    
  }
  second_ = second;
  // @@protoc_insertion_point(field_set_allocated:calculus.VectorRequest.second)
}

// .calculus.Vector third = 3;
inline bool VectorRequest::_internal_has_third() const {
  return this != internal_default_instance() && third_ != nullptr;
}
inline bool VectorRequest::has_third() const {
  return _internal_has_third();
}
inline void VectorRequest::clear_third() {
  if (GetArena() == nullptr && third_ != nullptr) {
    delete third_;
  }
  third_ = nullptr;
}
inline const ::calculus::Vector& VectorRequest::_internal_third() const {
  const ::calculus::Vector* p = third_;
  return p != nullptr ? *p : *reinterpret_cast<const ::calculus::Vector*>(
      &::calculus::_Vector_default_instance_);
}
inline const ::calculus::Vector& VectorRequest::third() const {
  // @@protoc_insertion_point(field_get:calculus.VectorRequest.third)
  return _internal_third();
}
inline void VectorRequest::unsafe_arena_set_allocated_third(
    ::calculus::Vector* third) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(third_);
  }
  third_ = third;
  if (third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:calculus.VectorRequest.third)
}
inline ::calculus::Vector* VectorRequest::release_third() {
  auto temp = unsafe_arena_release_third();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::calculus::Vector* VectorRequest::unsafe_arena_release_third() {
  // @@protoc_insertion_point(field_release:calculus.VectorRequest.third)
  
  ::calculus::Vector* temp = third_;
  third_ = nullptr;
  return temp;
}
inline ::calculus::Vector* VectorRequest::_internal_mutable_third() {
  
  if (third_ == nullptr) {
    auto* p = CreateMaybeMessage<::calculus::Vector>(GetArena());
    third_ = p;
  }
  return third_;
}
inline ::calculus::Vector* VectorRequest::mutable_third() {
  // @@protoc_insertion_point(field_mutable:calculus.VectorRequest.third)
  return _internal_mutable_third();
}
inline void VectorRequest::set_allocated_third(::calculus::Vector* third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete third_;
  }
  if (third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(third);
    if (message_arena != submessage_arena) {
      third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, third, submessage_arena);
    }
    
  } else {
    
  }
  third_ = third;
  // @@protoc_insertion_point(field_set_allocated:calculus.VectorRequest.third)
}

// -------------------------------------------------------------------

// VectorMagnitudeRequest

// double mag1 = 1;
inline void VectorMagnitudeRequest::clear_mag1() {
  mag1_ = 0;
}
inline double VectorMagnitudeRequest::_internal_mag1() const {
  return mag1_;
}
inline double VectorMagnitudeRequest::mag1() const {
  // @@protoc_insertion_point(field_get:calculus.VectorMagnitudeRequest.mag1)
  return _internal_mag1();
}
inline void VectorMagnitudeRequest::_internal_set_mag1(double value) {
  
  mag1_ = value;
}
inline void VectorMagnitudeRequest::set_mag1(double value) {
  _internal_set_mag1(value);
  // @@protoc_insertion_point(field_set:calculus.VectorMagnitudeRequest.mag1)
}

// double mag2 = 2;
inline void VectorMagnitudeRequest::clear_mag2() {
  mag2_ = 0;
}
inline double VectorMagnitudeRequest::_internal_mag2() const {
  return mag2_;
}
inline double VectorMagnitudeRequest::mag2() const {
  // @@protoc_insertion_point(field_get:calculus.VectorMagnitudeRequest.mag2)
  return _internal_mag2();
}
inline void VectorMagnitudeRequest::_internal_set_mag2(double value) {
  
  mag2_ = value;
}
inline void VectorMagnitudeRequest::set_mag2(double value) {
  _internal_set_mag2(value);
  // @@protoc_insertion_point(field_set:calculus.VectorMagnitudeRequest.mag2)
}

// double angle = 3;
inline void VectorMagnitudeRequest::clear_angle() {
  angle_ = 0;
}
inline double VectorMagnitudeRequest::_internal_angle() const {
  return angle_;
}
inline double VectorMagnitudeRequest::angle() const {
  // @@protoc_insertion_point(field_get:calculus.VectorMagnitudeRequest.angle)
  return _internal_angle();
}
inline void VectorMagnitudeRequest::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void VectorMagnitudeRequest::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:calculus.VectorMagnitudeRequest.angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calculus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vector_2eproto
